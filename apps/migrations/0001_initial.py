# Generated by Django 3.2.4 on 2023-07-05 08:18

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('user_name', models.CharField(max_length=100)),
                ('user_id', models.IntegerField()),
                ('department_name', models.CharField(max_length=100)),
                ('issue_no', models.AutoField(primary_key=True, serialize=False)),
                ('product_name', models.CharField(max_length=100)),
                ('trans_date', models.DateField(default=datetime.datetime(2023, 7, 5, 13, 48, 8, 991307))),
                ('quantity', models.IntegerField()),
                ('remark', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ProductList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('material_name', models.CharField(max_length=100)),
                ('brand', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Requisition',
            fields=[
                ('user_name', models.CharField(max_length=100)),
                ('department_name', models.CharField(max_length=100)),
                ('requisition_date', models.DateField(default=datetime.datetime(2023, 7, 5, 13, 48, 8, 991307))),
                ('requisition_no', models.AutoField(primary_key=True, serialize=False)),
                ('products', models.CharField(default='', max_length=100)),
                ('remark', models.TextField(blank=True)),
                ('approval_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='StoreBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=100)),
                ('brand', models.CharField(max_length=100)),
                ('quantity', models.IntegerField()),
                ('remark', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('user_id', models.IntegerField()),
                ('department', models.CharField(max_length=100)),
                ('material_name', models.CharField(max_length=100)),
                ('transaction_date', models.DateField()),
                ('quantity', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Workorder',
            fields=[
                ('workorder_no', models.AutoField(primary_key=True, serialize=False)),
                ('approval_status', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('report', models.TextField()),
                ('requisition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.requisition')),
            ],
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('purchase_no', models.AutoField(primary_key=True, serialize=False)),
                ('attach_file', models.FileField(upload_to='purchases/')),
                ('requisition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.requisition')),
                ('workorder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.workorder')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('ADMINISTRATION', 'Administration'), ('DEPARTMENT_HEAD', 'Department Head'), ('STORE_EXECUTIVE', 'Store Executive'), ('NORMAL_USER', 'Normal User')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
